diff --git a/src/agrum/PRM/o3prm/O3SystemFactory.tcc b/src/agrum/PRM/o3prm/O3SystemFactory.tcc
index 72bc9ff..b9b1d1f 100644
--- src/agrum/PRM/o3prm/O3SystemFactory.tcc
+++ src/agrum/PRM/o3prm/O3SystemFactory.tcc
@@ -162,7 +162,7 @@ namespace gum {
           if ( ass.leftIndex().value() > -1 &&
                real_sys.isArray( leftInstance ) ) {
 
-            auto sBuff = std::stringstream();
+            std::stringstream sBuff;
             sBuff << leftInstance << "[" << ass.leftIndex().value() << "]";
             leftInstance = sBuff.str();
           }
@@ -170,7 +170,7 @@ namespace gum {
           if ( ass.rightIndex().value() > -1 &&
                real_sys.isArray( rightInstance ) ) {
 
-            auto sBuff = std::stringstream();
+            std::stringstream sBuff;
             sBuff << rightInstance << "[" << ass.rightIndex().value() << "]";
             rightInstance = sBuff.str();
           }
@@ -193,7 +193,7 @@ namespace gum {
           if ( inc.leftIndex().value() > -1 &&
                real_sys.isArray( leftInstance ) ) {
 
-            auto sBuff = std::stringstream();
+            std::stringstream sBuff;
             sBuff << leftInstance << "[" << inc.leftIndex().value() << "]";
             leftInstance = sBuff.str();
           }
@@ -201,7 +201,7 @@ namespace gum {
           if ( inc.rightIndex().value() > -1 &&
                real_sys.isArray( rightInstance ) ) {
 
-            auto sBuff = std::stringstream();
+            std::stringstream sBuff;
             sBuff << rightInstance << "[" << inc.rightIndex().value() << "]";
             rightInstance = sBuff.str();
           }
diff --git a/src/agrum/PRM/o3prm/O3TypeFactory.tcc b/src/agrum/PRM/o3prm/O3TypeFactory.tcc
index cfafc02..e79dda3 100644
--- src/agrum/PRM/o3prm/O3TypeFactory.tcc
+++ src/agrum/PRM/o3prm/O3TypeFactory.tcc
@@ -163,7 +163,7 @@ namespace gum {
 
             for ( auto i = 0; i <= n; ++i ) {
 
-              auto s = std::stringstream();
+              std::stringstream s;
               s << type->start().value() + i;
 
               factory.addLabel( std::string( s.str() ) );
@@ -185,7 +185,7 @@ namespace gum {
             factory.startDiscreteType( type->name().label() );
 
             for ( std::size_t idx = 1; idx < type->values().size(); ++idx ) {
-              auto label = std::stringstream();
+              std::stringstream label;
               label << "[" << type->values()[idx - 1].value() << ", "
                     << type->values()[idx].value() << "[";
               factory.addLabel( label.str() );
diff --git a/src/agrum/PRM/o3prm/O3prmReader.tcc b/src/agrum/PRM/o3prm/O3prmReader.tcc
index 480f348..4faa354 100644
--- src/agrum/PRM/o3prm/O3prmReader.tcc
+++ src/agrum/PRM/o3prm/O3prmReader.tcc
@@ -37,9 +37,9 @@ namespace gum {
       O3prmReader<GUM_SCALAR>::__clean( std::string text ) const {
         auto match = std::regex( "Syntax error" );
         if ( std::regex_search( text, match ) ) {
-          text = std::regex_replace( text, match, "Error" );
+          text = std::regex_replace( text, match, std::string("Error") );
           auto regex = std::regex{"[A-Z_][A-Z_]+"};
-          text = std::regex_replace( text, regex, "declaration" );
+          text = std::regex_replace( text, regex, std::string("declaration") );
           return std::move( text );
         }
         return std::move( text );
@@ -250,7 +250,7 @@ namespace gum {
       template <typename GUM_SCALAR>
       INLINE Size
       O3prmReader<GUM_SCALAR>::readString( const std::string& str ) {
-        auto sBuff = std::stringstream( str );
+        std::stringstream sBuff( str );
         __readStream( sBuff, "" );
         return __errors.count();
       }
@@ -271,7 +271,7 @@ namespace gum {
           auto basename = file.substr( lastSlashIndex + 1 );
           auto absFilename = dir.absolutePath() + basename;
 
-          auto input = std::ifstream( absFilename );
+          std::ifstream input( absFilename );
           if ( input.is_open() ) {
             __readStream( input, file, module );
           } else {
@@ -335,7 +335,7 @@ namespace gum {
           for ( const auto& cp : __class_path ) {
 
             auto file_path = cp + path + ".o3prm";
-            auto file = std::ifstream( file_path );
+            std::ifstream file( file_path );
 
             if ( file.is_open() ) {
 
@@ -345,12 +345,12 @@ namespace gum {
             }
 
             file_path = cp + module + path + ".o3prm";
-            file = std::ifstream( file_path );
+            std::ifstream file2( file_path );
 
-            if ( file.is_open() ) {
+            if ( file2.is_open() ) {
 
               __parseStream(
-                  file, file_path, module + "." + i.import().label() );
+                  file2, file_path, module + "." + i.import().label() );
               imported = true;
               break;
             }
@@ -358,7 +358,7 @@ namespace gum {
 
           if ( !imported ) {
             const auto& pos = i.import().position();
-            auto msg = std::stringstream();
+            std::stringstream msg;
             msg << "Import error: could not resolve import "
                 << i.import().label();
             __errors.addError(
diff --git a/src/agrum/PRM/o3prm/cocoR/Parser.cpp b/src/agrum/PRM/o3prm/cocoR/Parser.cpp
index b3cc991..b462984 100644
--- src/agrum/PRM/o3prm/cocoR/Parser.cpp
+++ src/agrum/PRM/o3prm/cocoR/Parser.cpp
@@ -210,7 +210,7 @@ void Parser::PREFIXED_LABEL(O3Label& l) {
 }
 
 void Parser::CHAIN(O3Label& ident) {
-		auto s = std::stringstream(); 
+		std::stringstream s; 
 		Expect(_label);
 		auto pos = O3Position( narrow( scanner->filename() ), t->line, t->col ); 
 		s << narrow( t->val ); 
@@ -404,7 +404,7 @@ void Parser::LABEL_LIST(O3LabelList& list) {
 }
 
 void Parser::IDENTIFIER(O3Label& ident) {
-		auto s = std::stringstream(); 
+		std::stringstream s; 
 		if (la->kind == 27 /* "(" */) {
 			CAST(s);
 		}
@@ -647,7 +647,7 @@ void Parser::SYSTEM_DECLARATION(O3System& s) {
 }
 
 void Parser::SYSTEM_BODY(O3System& sys) {
-		auto left_value = std::stringstream(); 
+		std::stringstream left_value; 
 		Expect(_label);
 		left_value << narrow(t->val); 
 		auto pos = O3Position( narrow( scanner->filename() ), t->line, t->col ); 
diff --git a/src/agrum/PRM/o3prm/cocoR/SyntaxO3PRM.atg b/src/agrum/PRM/o3prm/cocoR/SyntaxO3PRM.atg
index 5130202..274b20a 100644
--- src/agrum/PRM/o3prm/cocoR/SyntaxO3PRM.atg
+++ src/agrum/PRM/o3prm/cocoR/SyntaxO3PRM.atg
@@ -599,7 +599,7 @@ SYSTEM_DECLARATION<O3System& s> =
 
 //________________________
 SYSTEM_BODY<O3System& sys> =
-  (. auto left_value = std::stringstream(); .)
+  (. std::stringstream left_value; .)
   label
   (. left_value << narrow(t->val); .)
   (. auto pos = O3Position( narrow( scanner->filename() ), t->line, t->col ); .)
@@ -856,7 +856,7 @@ IDENTIFIER_LIST<O3LabelList& list> =
 //________________________
 IDENTIFIER<O3Label& ident> =
 
-  (. auto s = std::stringstream(); .)
+  (. std::stringstream s; .)
   [
     CAST<s>
   ]
@@ -895,7 +895,7 @@ LINK<std::stringstream& s> =
 
 //________________________
 CHAIN<O3Label& ident> =
-  (. auto s = std::stringstream(); .)
+  (. std::stringstream s; .)
   label
   (. auto pos = O3Position( narrow( scanner->filename() ), t->line, t->col ); .)
   (. s << narrow( t->val ); .)
diff --git a/src/agrum/PRM/o3prm/errors.cpp b/src/agrum/PRM/o3prm/errors.cpp
index b8ac738..75b8326 100644
--- src/agrum/PRM/o3prm/errors.cpp
+++ src/agrum/PRM/o3prm/errors.cpp
@@ -36,7 +36,7 @@ namespace gum {
 
       void O3PRM_TYPE_NOT_FOUND( const O3Label& val, ErrorsContainer& errors ) {
         auto pos = val.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Unknown type " << val.label();
         errors.addError( msg.str(), pos.file(), pos.line(), pos.column() );
@@ -46,7 +46,7 @@ namespace gum {
                                  const std::vector<std::string>& matches,
                                  ErrorsContainer& errors ) {
         const auto& pos = val.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Ambiguous name " << val.label()
             << ", found more than one elligible types: ";
@@ -59,7 +59,7 @@ namespace gum {
 
       void O3PRM_TYPE_RESERVED( const O3Label& val, ErrorsContainer& errors ) {
         const auto& pos = val.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Type name " << val.label() << " is reserved";
         errors.addError( msg.str(), pos.file(), pos.line(), pos.column() );
@@ -68,7 +68,7 @@ namespace gum {
       void O3PRM_TYPE_DUPPLICATE( const O3Label& val,
                                   ErrorsContainer& errors ) {
         const auto& pos = val.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Type " << val.label() << " exists already";
         errors.addError( msg.str(), pos.file(), pos.line(), pos.column() );
@@ -78,7 +78,7 @@ namespace gum {
                                           const O3Label& super_type,
                                           ErrorsContainer& errors ) {
         const auto& pos = sub_type.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Cyclic inheritance between type " << sub_type.label()
             << " and type " << super_type.label();
@@ -89,7 +89,7 @@ namespace gum {
                                      const O3Label& l,
                                      ErrorsContainer& errors ) {
         const auto& pos = l.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Unknown label " << l.label() << " in " << type.label();
         errors.addError( msg.str(), pos.file(), pos.line(), pos.column() );
@@ -98,7 +98,7 @@ namespace gum {
       void O3PRM_TYPE_INVALID_RANGE( const O3IntType& val,
                                      ErrorsContainer& errors ) {
         const auto& pos = val.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Invalid range " << val.start().value() << " -> "
             << val.end().value();
@@ -108,7 +108,7 @@ namespace gum {
       void O3PRM_TYPE_INVALID_RANGE( const O3RealType& val,
                                      ErrorsContainer& errors ) {
         const auto& pos = val.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Found " << val.values().size()
             << " values in range expected at least 3";
@@ -118,7 +118,7 @@ namespace gum {
       void O3PRM_CLASS_NOT_FOUND( const O3Label& val,
                                   ErrorsContainer& errors ) {
         const auto& pos = val.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Unknown class " << val.label();
         errors.addError( msg.str(), pos.file(), pos.line(), pos.column() );
@@ -129,7 +129,7 @@ namespace gum {
                                   const std::vector<std::string>& matches,
                                   ErrorsContainer& errors ) {
         const auto& pos = val.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Name " << val.label() << " is ambiguous: ";
         for ( std::size_t i = 0; i < matches.size() - 1; ++i ) {
@@ -143,7 +143,7 @@ namespace gum {
                                   ErrorsContainer& errors ) {
         // Raised if duplicate type names
         const auto& pos = val.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Class name " << val.label() << " exists already";
         errors.addError( msg.str(), pos.file(), pos.line(), pos.column() );
@@ -154,7 +154,7 @@ namespace gum {
                                           ErrorsContainer& errors ) {
         // Cyclic inheritance
         const auto& pos = sub.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Cyclic inheritance between class " << sub.label()
             << " and class " << super.label();
@@ -167,7 +167,7 @@ namespace gum {
                                             const O3Label& attr,
                                             ErrorsContainer& errors ) {
         const auto& pos = attr.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Class " << c.label() << " attribute " << attr.label()
             << " does not respect interface " << i.label();
@@ -179,7 +179,7 @@ namespace gum {
                                            const O3Label& attr,
                                            ErrorsContainer& errors ) {
         const auto& pos = attr.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Class " << c.label() << " aggregate " << attr.label()
             << " does not respect interface " << i.label();
@@ -191,7 +191,7 @@ namespace gum {
                                            const O3Label& ref,
                                            ErrorsContainer& errors ) {
         const auto& pos = ref.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Class " << c.label() << " reference " << ref.label()
             << " does not respect interface " << i.label();
@@ -203,7 +203,7 @@ namespace gum {
                                            const O3Label& i,
                                            ErrorsContainer& errors ) {
         const auto& pos = c.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Class " << c.label() << " does not implement all of interface "
             << i.label() << " attributes";
@@ -213,7 +213,7 @@ namespace gum {
       void O3PRM_CLASS_DUPLICATE_REFERENCE( const O3Label& ref,
                                             ErrorsContainer& errors ) {
         const auto& pos = ref.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Reference Slot name " << ref.label() << " exists already";
         errors.addError( msg.str(), pos.file(), pos.line(), pos.column() );
@@ -223,7 +223,7 @@ namespace gum {
                                        const O3Label& ref,
                                        ErrorsContainer& errors ) {
         const auto& pos = ref.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Class " << c.label() << " cannot reference itself";
         errors.addError( msg.str(), pos.file(), pos.line(), pos.column() );
@@ -233,7 +233,7 @@ namespace gum {
                                               const O3Label& sub,
                                               ErrorsContainer& errors ) {
         const auto& pos = sub.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Class " << c.label() << " cannot reference subclass "
             << sub.label();
@@ -243,7 +243,7 @@ namespace gum {
       void O3PRM_CLASS_PARENT_NOT_FOUND( const O3Label& parent,
                                          ErrorsContainer& errors ) {
         const auto& pos = parent.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Parent " << parent.label() << " not found";
         errors.addError( msg.str(), pos.file(), pos.line(), pos.column() );
@@ -252,7 +252,7 @@ namespace gum {
       void O3PRM_CLASS_ILLEGAL_PARENT( const O3Label& parent,
                                        ErrorsContainer& errors ) {
         const auto& pos = parent.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Illegal parent " << parent.label();
         errors.addError( msg.str(), pos.file(), pos.line(), pos.column() );
@@ -262,7 +262,7 @@ namespace gum {
                                        const std::string& s,
                                        ErrorsContainer& errors ) {
         const auto& pos = chain.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Link " << s << " in chain " << chain.label() << " not found";
         errors.addError( msg.str(), pos.file(), pos.line(), pos.column() );
@@ -274,7 +274,7 @@ namespace gum {
                                          Size expected,
                                          ErrorsContainer& errors ) {
         const auto& pos = attr.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Illegal CPT size, expected " << expected << " found " << found
             << " for attribute " << c << "." << attr.label();
@@ -286,7 +286,7 @@ namespace gum {
                                           const O3Formula& f,
                                           ErrorsContainer& errors ) {
         const auto& pos = f.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Illegal CPT value \"" << f.formula().formula()
             << "\" in attribute " << c << "." << attr.label();
@@ -305,7 +305,7 @@ namespace gum {
                                               float f,
                                               ErrorsContainer& errors ) {
         const auto& pos = attr.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "PRMAttribute " << c << "." << attr.label()
             << " CPT does not sum to 1, found " << f;
@@ -318,7 +318,7 @@ namespace gum {
                                                  float f,
                                                  ErrorsContainer& errors ) {
         const auto& pos = attr.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Warning : "
             << "PRMAttribute " << c << "." << attr.label()
             << " CPT does not sum to 1, found " << f;
@@ -330,7 +330,7 @@ namespace gum {
                                           size_t expected,
                                           ErrorsContainer& errors ) {
         const auto& pos = rule.first.front().position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Expected " << expected << " value(s), found " << found;
         errors.addError( msg.str(), pos.file(), pos.line(), pos.column() );
@@ -339,7 +339,7 @@ namespace gum {
       void O3PRM_CLASS_WRONG_PARENT( const O3Label& prnt,
                                      ErrorsContainer& errors ) {
         const auto& pos = prnt.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Illegal parent " << prnt;
         errors.addError( msg.str(), pos.file(), pos.line(), pos.column() );
@@ -350,7 +350,7 @@ namespace gum {
                                           const std::string& found,
                                           ErrorsContainer& errors ) {
         const auto& pos = prnt.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Expected type " << expected << " for parent " << prnt.label()
             << ", found " << found;
@@ -361,7 +361,7 @@ namespace gum {
                                          const O3Label& c,
                                          ErrorsContainer& errors ) {
         const auto& pos = elt.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Illegal overload of element " << elt.label() << " from class "
             << c.label();
@@ -373,7 +373,7 @@ namespace gum {
                                        Size found,
                                        ErrorsContainer& errors ) {
         const auto& pos = agg.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Expected " << expected << " parameters "
             << ", found " << found;
@@ -384,7 +384,7 @@ namespace gum {
                                                 const O3Label& param,
                                                 ErrorsContainer& errors ) {
         const auto& pos = param.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Parameter " << param.label() << " in aggregate " << agg.label()
             << " does not match any expected values";
@@ -394,7 +394,7 @@ namespace gum {
       void O3PRM_INTERFACE_ILLEGAL_ARRAY( const O3Label& val,
                                           ErrorsContainer& errors ) {
         const auto& pos = val.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "PRMAttribute " << val.label() << " can not be an array";
         errors.addError( msg.str(), pos.file(), pos.line(), pos.column() );
@@ -403,7 +403,7 @@ namespace gum {
       void O3PRM_INTERFACE_NOT_FOUND( const O3Label& val,
                                       ErrorsContainer& errors ) {
         const auto& pos = val.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Interface " << val.label() << " not found";
         errors.addError( msg.str(), pos.file(), pos.line(), pos.column() );
@@ -413,7 +413,7 @@ namespace gum {
                                       const std::vector<std::string>& matches,
                                       ErrorsContainer& errors ) {
         const auto& pos = val.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Name " << val.label() << " is ambiguous: ";
         for ( std::size_t i = 0; i < matches.size() - 1; ++i ) {
@@ -426,7 +426,7 @@ namespace gum {
       void O3PRM_INTERFACE_DUPLICATE( const O3Label& val,
                                       ErrorsContainer& errors ) {
         const auto& pos = val.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Interface name " << val.label() << " exists already";
         errors.addError( msg.str(), pos.file(), pos.line(), pos.column() );
@@ -435,7 +435,7 @@ namespace gum {
       void O3PRM_INTERFACE_DUPLICATE_ELEMENT( const O3InterfaceElement& elt,
                                               ErrorsContainer& errors ) {
         const auto& pos = elt.type().position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Element " << elt.name().label() << " already exists";
         errors.addError( msg.str(), pos.file(), pos.line(), pos.column() );
@@ -445,7 +445,7 @@ namespace gum {
                                                const O3Label& super,
                                                ErrorsContainer& errors ) {
         const auto& pos = super.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Cyclic inheritance between interface " << sub.label()
             << " and interface " << super.label();
@@ -456,7 +456,7 @@ namespace gum {
                                            const O3InterfaceElement& r,
                                            ErrorsContainer& errors ) {
         const auto& pos = r.type().position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Interface " << i.name().label() << " cannot reference itself";
         errors.addError( msg.str(), pos.file(), pos.line(), pos.column() );
@@ -466,7 +466,7 @@ namespace gum {
                                                   const O3InterfaceElement& ref,
                                                   ErrorsContainer& errors ) {
         const auto& pos = ref.type().position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Interface " << i.name().label()
             << " cannot reference subinterface " << ref.type().label();
@@ -476,7 +476,7 @@ namespace gum {
       void O3PRM_INTERFACE_ILLEGAL_OVERLOAD( const O3InterfaceElement& elt,
                                              ErrorsContainer& errors ) {
         const auto& pos = elt.type().position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Illegal overload of element " << elt.name().label();
         errors.addError( msg.str(), pos.file(), pos.line(), pos.column() );
@@ -485,7 +485,7 @@ namespace gum {
       void O3PRM_REFERENCE_NOT_FOUND( const O3Label& val,
                                       ErrorsContainer& errors ) {
         const auto& pos = val.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Reference Slot type " << val.label() << " not found";
         errors.addError( msg.str(), pos.file(), pos.line(), pos.column() );
@@ -495,7 +495,7 @@ namespace gum {
                                       const std::vector<std::string>& matches,
                                       ErrorsContainer& errors ) {
         const auto& pos = val.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Name " << val.label() << " is ambiguous: ";
         for ( std::size_t i = 0; i < matches.size() - 1; ++i ) {
@@ -508,7 +508,7 @@ namespace gum {
       void O3PRM_SYSTEM_INSTANTIATION_FAILED( const O3System& sys,
                                               ErrorsContainer& errors ) {
         const auto& pos = sys.name().position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Could not instantiate the system, some reference slots must be "
                "unassigned";
@@ -518,7 +518,7 @@ namespace gum {
       void O3PRM_SYSTEM_NOT_A_CLASS( const O3Instance& i,
                                      ErrorsContainer& errors ) {
         const auto& pos = i.type().position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : " << i.type().label() << " is not a class";
         errors.addError( msg.str(), pos.file(), pos.line(), pos.column() );
       }
@@ -526,7 +526,7 @@ namespace gum {
       void O3PRM_SYSTEM_DUPLICATE_INSTANCE( const O3Instance& i,
                                             ErrorsContainer& errors ) {
         const auto& pos = i.type().position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Instance " << i.name().label() << " already exists";
         errors.addError( msg.str(), pos.file(), pos.line(), pos.column() );
@@ -535,7 +535,7 @@ namespace gum {
       void O3PRM_SYSTEM_NOT_A_PARAMETER( const O3InstanceParameter& param,
                                          ErrorsContainer& errors ) {
         const auto& pos = param.name().position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Instance error : " << param.name().label()
             << " is not a parameter";
         errors.addError( msg.str(), pos.file(), pos.line(), pos.column() );
@@ -544,7 +544,7 @@ namespace gum {
       void O3PRM_SYSTEM_PARAMETER_NOT_FOUND( const O3InstanceParameter& param,
                                              ErrorsContainer& errors ) {
         const auto& pos = param.name().position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Parameter " << param.name().label() << " not found";
         errors.addError( msg.str(), pos.file(), pos.line(), pos.column() );
@@ -553,7 +553,7 @@ namespace gum {
       void O3PRM_SYSTEM_PARAMETER_NOT_INT( const O3InstanceParameter& param,
                                            ErrorsContainer& errors ) {
         const auto& pos = param.value().position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Parameter " << param.name().label() << " is an integer";
         errors.addError( msg.str(), pos.file(), pos.line(), pos.column() );
@@ -562,7 +562,7 @@ namespace gum {
       void O3PRM_SYSTEM_PARAMETER_NOT_FLOAT( const O3InstanceParameter& param,
                                              ErrorsContainer& errors ) {
         const auto& pos = param.value().position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Parameter " << param.name().label() << " is a float";
         errors.addError( msg.str(), pos.file(), pos.line(), pos.column() );
@@ -571,7 +571,7 @@ namespace gum {
       void O3PRM_SYSTEM_INVALID_LEFT_VALUE( const O3Label& val,
                                             ErrorsContainer& errors ) {
         const auto& pos = val.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Invalid left expression " << val.label();
         errors.addError( msg.str(), pos.file(), pos.line(), pos.column() );
@@ -580,7 +580,7 @@ namespace gum {
       void O3PRM_SYSTEM_INSTANCE_NOT_FOUND( const O3Label& i,
                                             ErrorsContainer& errors ) {
         const auto& pos = i.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Instance " << i.label() << " not found";
         errors.addError( msg.str(), pos.file(), pos.line(), pos.column() );
@@ -590,7 +590,7 @@ namespace gum {
                                              const std::string& type,
                                              ErrorsContainer& errors ) {
         const auto& pos = ref.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : "
             << "Reference " << ref.label() << " not found in class " << type;
         errors.addError( msg.str(), pos.file(), pos.line(), pos.column() );
@@ -599,7 +599,7 @@ namespace gum {
       void O3PRM_SYSTEM_NOT_AN_ARRAY( const O3Label& val,
                                       ErrorsContainer& errors ) {
         const auto& pos = val.position();
-        auto msg = std::stringstream();
+        std::stringstream msg;
         msg << "Error : " << val.label() << " is not an array";
         errors.addError( msg.str(), pos.file(), pos.line(), pos.column() );
       }
diff --git a/src/cmake/FindCXX14.cmake b/src/cmake/FindCXX14.cmake
index fd30e24..f679a05 100644
--- src/cmake/FindCXX14.cmake
+++ src/cmake/FindCXX14.cmake
@@ -13,6 +13,7 @@ include(FindPackageHandleStandardArgs)
 set(CXX14_FLAG_CANDIDATES
         #GCC>=4.7.3
         "-std=c++14"
+        "-std=c++1y"
         #Microsoft Visual Studio, and everything that automatically accepts C++14
         " "
         #Intel windows
@@ -57,4 +58,4 @@ endforeach(FLAG ${CXX14_FLAG_CANDIDATES})
 set(CXX14_FLAGS "${CXX14_FLAGS_INTERNAL}")
 
 find_package_handle_standard_args(CXX14 DEFAULT_MSG CXX14_FLAGS)
-mark_as_advanced(CXX14_FLAGS)
\ No newline at end of file
+mark_as_advanced(CXX14_FLAGS)
diff --git a/src/testunits/module_BASE/FormulaTestSuite.h b/src/testunits/module_BASE/FormulaTestSuite.h
index 25a304a..3073ae5 100644
--- src/testunits/module_BASE/FormulaTestSuite.h
+++ src/testunits/module_BASE/FormulaTestSuite.h
@@ -480,7 +480,7 @@ namespace gum_tests {
       // Arrange
       auto f = gum::Formula( "2*5+6" );
       auto expected = std::to_string( 2 * 5 + 6 );
-      auto result = std::stringstream();
+      std::stringstream result;
       // Act
       TS_GUM_ASSERT_THROWS_NOTHING( result << f );
       // Assert
diff --git a/src/testunits/module_PRM/O3ClassTestSuite.h b/src/testunits/module_PRM/O3ClassTestSuite.h
index 06969b4..29e53b9 100644
--- src/testunits/module_PRM/O3ClassTestSuite.h
+++ src/testunits/module_PRM/O3ClassTestSuite.h
@@ -38,9 +38,9 @@ namespace gum_tests {
 
     void testEmptyClass() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "class Bar { }";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -57,9 +57,9 @@ namespace gum_tests {
 
     void testEmptyClassError1() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "clas Bar { }";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -67,7 +67,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|1 col 1| Error : invalid declaration";
       TS_ASSERT_EQUALS( line, msg.str() );
       TS_ASSERT_EQUALS( prm.classes().size(), (gum::Size)0 );
@@ -76,9 +76,9 @@ namespace gum_tests {
 
     void testEmptyClassError2() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "class { }";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -86,7 +86,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|1 col 7| Error : label expected";
       TS_ASSERT_EQUALS( line, msg.str() );
       TS_ASSERT_EQUALS( prm.classes().size(), (gum::Size)0 );
@@ -95,9 +95,9 @@ namespace gum_tests {
 
     void testEmptyClassError3() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "class ++++/ze { }";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -105,7 +105,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|1 col 7| Error : label expected";
       TS_ASSERT_EQUALS( line, msg.str() );
       TS_ASSERT_EQUALS( prm.classes().size(), (gum::Size)0 );
@@ -114,11 +114,11 @@ namespace gum_tests {
 
     void testSimpleClass1() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "class Bar { " << std::endl
             << "boolean state {[0.2, 0.8]};" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -144,12 +144,12 @@ namespace gum_tests {
 
     void testSimpleClass2() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type t_state OK, NOK;" << std::endl;
       input << "class Bar { " << std::endl
             << "t_state state {[0.2, 0.8]};" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -175,7 +175,7 @@ namespace gum_tests {
 
     void testSimpleClass3() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type t_state OK, NOK;" << std::endl;
       input << "class Bar { " << std::endl
             << "t_state state {[0.2, 0.8]};" << std::endl
@@ -184,7 +184,7 @@ namespace gum_tests {
             << "  {[0.2, 0.4,  // false" << std::endl
             << "   0.8, 0.6]}; // true" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -220,7 +220,7 @@ namespace gum_tests {
 
     void testSimpleClassError1() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type t_state OK, NOK;" << std::endl;
       input << "class Bar { " << std::endl
             << "t_state state {[0.2, 0.8]};" << std::endl
@@ -229,7 +229,7 @@ namespace gum_tests {
             << "  {[0.2, 0.4,  // false" << std::endl
             << "    0.2, 0.6]}; // true" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -237,7 +237,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|4 col 9| Error : PRMAttribute Bar.isWorking CPT does not sum to "
              "1, "
              "found 0.4";
@@ -247,7 +247,7 @@ namespace gum_tests {
 
     void testSimpleClassError2() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type t_state OK, NOK;" << std::endl;
       input << "class Bar { " << std::endl
             << "t_state state {[0.2, 0.8]};" << std::endl
@@ -256,7 +256,7 @@ namespace gum_tests {
             << "  {[0.2, 0.4,  // false" << std::endl
             << "    0.2, 0.6]}; // true" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -264,7 +264,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|4 col 29| Error : Parent stat not found";
       TS_ASSERT_EQUALS( line, msg.str() );
       TS_ASSERT_EQUALS( prm.classes().size(), (gum::Size)1 );
@@ -272,7 +272,7 @@ namespace gum_tests {
 
     void testSimpleClassError3() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type t_state OK, NOK;" << std::endl;
       input << "class Bar { " << std::endl
             << "t_state state {[0.2, 0.8]};" << std::endl
@@ -282,7 +282,7 @@ namespace gum_tests {
             << "    0.2, 0.4,   // true" << std::endl
             << "    0.6, 0.2]}; // oops" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -290,7 +290,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|4 col 9| Error : Illegal CPT size, expected 4 found 6 for "
              "attribute Bar.isWorking";
       TS_ASSERT_EQUALS( line, msg.str() );
@@ -299,7 +299,7 @@ namespace gum_tests {
 
     void testSimpleRules1() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type t_state OK, NOK;" << std::endl;
       input << "class Bar { " << std::endl
             << "t_state state {[0.2, 0.8]};" << std::endl
@@ -308,7 +308,7 @@ namespace gum_tests {
             << "NOK: 0.8, 0.2;" << std::endl
             << "};" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -344,7 +344,7 @@ namespace gum_tests {
 
     void testSimpleRules2() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type t_state OK, NOK;" << std::endl;
       input << "class Bar { " << std::endl
             << "t_state state {[0.2, 0.8]};" << std::endl
@@ -353,7 +353,7 @@ namespace gum_tests {
             << "*: 0.8, 0.2;" << std::endl
             << "};" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -389,7 +389,7 @@ namespace gum_tests {
 
     void testSimpleRules3() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type t_state OK, NOK;" << std::endl;
       input << "class Bar { " << std::endl
             << "t_state state {[0.2, 0.8]};" << std::endl
@@ -398,7 +398,7 @@ namespace gum_tests {
             << "NOK: \"80/100\", \"20/100\";" << std::endl
             << "};" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -434,7 +434,7 @@ namespace gum_tests {
 
     void testSimpleRules4() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type t_state OK, NOK;" << std::endl;
       input << "class Bar { " << std::endl
             << "t_state state {[0.2, 0.8]};" << std::endl
@@ -443,7 +443,7 @@ namespace gum_tests {
             << "NOK: '80/100', '20/100';" << std::endl
             << "};" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -479,7 +479,7 @@ namespace gum_tests {
 
     void testSimpleRulesError1() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type t_state OK, NOK;" << std::endl;
       input << "class Bar { " << std::endl
             << "t_state state {[0.2, 0.8]};" << std::endl
@@ -488,7 +488,7 @@ namespace gum_tests {
             << "NOK: '80/100', '20/100';" << std::endl
             << "};" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -496,7 +496,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|5 col 15| Error : Illegal CPT value \"110/100\" in attribute "
              "Bar.isWorking, formula resolve to 1.1";
       TS_ASSERT_EQUALS( line, msg.str() );
@@ -505,7 +505,7 @@ namespace gum_tests {
 
     void testSimpleRulesError2() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type t_state OK, NOK;" << std::endl;
       input << "class Bar { " << std::endl
             << "t_state state {[0.2, 0.8]};" << std::endl
@@ -514,7 +514,7 @@ namespace gum_tests {
             << "NOK, BAR: '80/100', '20/100';" << std::endl
             << "};" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -522,7 +522,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|5 col 1| Error : Expected 1 value(s), found 2";
       TS_ASSERT_EQUALS( line, msg.str() );
       TS_ASSERT_EQUALS( prm.classes().size(), (gum::Size)1 );
@@ -530,7 +530,7 @@ namespace gum_tests {
 
     void testSimpleRulesError3() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type t_state OK, NOK;" << std::endl;
       input << "class Bar { " << std::endl
             << "t_state state {[0.2, 0.8]};" << std::endl
@@ -539,7 +539,7 @@ namespace gum_tests {
             << "NOK: 'FOO', '20/100';" << std::endl
             << "};" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -547,7 +547,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|6 col 6| Error : Illegal CPT value \"FOO\" in attribute "
              "Bar.isWorking, could not resolve the following formula: \"FOO\"";
       TS_ASSERT_EQUALS( line, msg.str() );
@@ -556,7 +556,7 @@ namespace gum_tests {
 
     void testSimpleParameter1() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "class Bar { " << std::endl
             << "real lambda default 0.003;" << std::endl
             << "int t default 8760;" << std::endl
@@ -564,7 +564,7 @@ namespace gum_tests {
             << "[ 'exp(-lambda*t)', '1-exp(-lambda*t)' ]" << std::endl
             << "};" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -592,7 +592,7 @@ namespace gum_tests {
 
     void testSimpleParameter2() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type t_state OK, NOK;" << std::endl;
       input << "class Bar { " << std::endl
             << "real lambda default 0.003;" << std::endl
@@ -603,7 +603,7 @@ namespace gum_tests {
             << "NOK: '1.0', '0.0';" << std::endl
             << "};" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -638,12 +638,12 @@ namespace gum_tests {
 
     void testClassWithReference1() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface Foo { " << std::endl
             << "boolean state;" << std::endl
             << "}" << std::endl;
       input << "class Bar { " << std::endl << "Foo myFoo;" << std::endl << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -674,14 +674,14 @@ namespace gum_tests {
 
     void testClassWithReference2() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface Foo { " << std::endl
             << "boolean state;" << std::endl
             << "}" << std::endl;
       input << "class Bar { " << std::endl
             << "Foo[] myFoo;" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -712,7 +712,7 @@ namespace gum_tests {
 
     void testClassWithReference3() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type state OK, NOK;" << std::endl;
       input << "interface Foo { " << std::endl
             << "state state;" << std::endl
@@ -726,7 +726,7 @@ namespace gum_tests {
             << "NOK: '1.0', '0.0';" << std::endl
             << "};" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -777,7 +777,7 @@ namespace gum_tests {
 
     void testClassWithReference4() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type state OK, NOK;" << std::endl;
       input << "class Foo { " << std::endl
             << "int t default 8760;" << std::endl
@@ -792,7 +792,7 @@ namespace gum_tests {
             << "NOK: '1.0', '0.0';" << std::endl
             << "};" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -843,7 +843,7 @@ namespace gum_tests {
 
     void testClassWithReferenceError1() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type state OK, NOK;" << std::endl;
       input << "interface Foo { " << std::endl
             << "state state;" << std::endl
@@ -857,7 +857,7 @@ namespace gum_tests {
             << "NOK: '1.0', '0.0';" << std::endl
             << "};" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -865,7 +865,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|9 col 29| Error : Link myfoo in chain myfoo.state "
              "not found";
       TS_ASSERT_EQUALS( line, msg.str() );
@@ -874,7 +874,7 @@ namespace gum_tests {
 
     void testClassWithReferenceError2() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type state OK, NOK;" << std::endl;
       input << "interface Foo { " << std::endl
             << "state state;" << std::endl
@@ -888,7 +888,7 @@ namespace gum_tests {
             << "NOK: '1.0', '0.0';" << std::endl
             << "};" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -896,7 +896,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|9 col 29| Error : Link stat in chain myFoo.stat not "
              "found";
       TS_ASSERT_EQUALS( line, msg.str() );
@@ -905,7 +905,7 @@ namespace gum_tests {
 
     void testClassWithReferenceError3() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type state OK, NOK;" << std::endl;
       input << "interface Foo { " << std::endl
             << "state state;" << std::endl
@@ -918,7 +918,7 @@ namespace gum_tests {
             << "NOK: '1.0', '0.0';" << std::endl
             << "};" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -926,7 +926,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|8 col 29| Error : Link myFoo in chain myFoo.state "
              "not found";
       TS_ASSERT_EQUALS( line, msg.str() );
@@ -935,7 +935,7 @@ namespace gum_tests {
 
     void testClassWithReferenceError4() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "class Bar extends Foo { " << std::endl
             << "boolean isWorking dependson state {[0.5, 0.5, 0.5, 0.5]};"
             << std::endl
@@ -950,7 +950,7 @@ namespace gum_tests {
             << "Bar myBar;" << std::endl
             << "boolean state;" << std::endl
             << "}" << std::endl;
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -958,7 +958,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|6 col 1| Error : Class Foo cannot reference "
              "subclass Bar";
       TS_ASSERT_EQUALS( line, msg.str() );
@@ -967,7 +967,7 @@ namespace gum_tests {
 
     void testClassWithReferenceError6() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "class Bar extends Foo { " << std::endl
             << "Bar myBar;" << std::endl
             << "boolean isWorking dependson state {[0.5, 0.5, 0.5, 0.5]};"
@@ -983,7 +983,7 @@ namespace gum_tests {
             << "Bar myBar;" << std::endl
             << "boolean state;" << std::endl
             << "}" << std::endl;
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -991,7 +991,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|7 col 1| Error : Class Foo cannot reference "
              "subclass Bar";
       TS_ASSERT_EQUALS( line, msg.str() );
@@ -999,7 +999,7 @@ namespace gum_tests {
 
     void testOrAggregate() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface Foo { " << std::endl
             << "boolean state;" << std::endl
             << "}" << std::endl;
@@ -1007,7 +1007,7 @@ namespace gum_tests {
             << "Foo[] myFoos;" << std::endl
             << "boolean isWorking = or(myFoos.state);" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -1045,7 +1045,7 @@ namespace gum_tests {
 
     void testOrAggregateArray() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface Foo { " << std::endl
             << "boolean state;" << std::endl
             << "}" << std::endl;
@@ -1055,7 +1055,7 @@ namespace gum_tests {
             << "boolean isWorking = or([myFoos.state, myBoos.state]);"
             << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -1093,7 +1093,7 @@ namespace gum_tests {
 
     void testAndAggregate() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface Foo { " << std::endl
             << "boolean state;" << std::endl
             << "}" << std::endl;
@@ -1101,7 +1101,7 @@ namespace gum_tests {
             << "Foo[] myFoos;" << std::endl
             << "boolean isWorking = and(myFoos.state);" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -1139,7 +1139,7 @@ namespace gum_tests {
 
     void testAndAggregateArray() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface Foo { " << std::endl
             << "boolean state;" << std::endl
             << "}" << std::endl;
@@ -1149,7 +1149,7 @@ namespace gum_tests {
             << "boolean isWorking = and([myFoos.state, myBoos.state]);"
             << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -1187,7 +1187,7 @@ namespace gum_tests {
 
     void testForAllAggregate() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type state OK, NOK;" << std::endl;
       input << "interface Foo { " << std::endl
             << "state state;" << std::endl
@@ -1196,7 +1196,7 @@ namespace gum_tests {
             << "Foo[] myFoos;" << std::endl
             << "boolean isWorking = forall(myFoos.state, OK);" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -1234,7 +1234,7 @@ namespace gum_tests {
 
     void testForAllAggregateArray() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type state OK, NOK;" << std::endl;
       input << "interface Foo { " << std::endl
             << "state state;" << std::endl
@@ -1245,7 +1245,7 @@ namespace gum_tests {
             << "boolean isWorking = forall([myFoos.state, myBoos.state], OK);"
             << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -1283,7 +1283,7 @@ namespace gum_tests {
 
     void testExistsAggregate() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type state OK, NOK;" << std::endl;
       input << "interface Foo { " << std::endl
             << "state state;" << std::endl
@@ -1292,7 +1292,7 @@ namespace gum_tests {
             << "Foo[] myFoos;" << std::endl
             << "boolean isWorking = exists(myFoos.state, OK);" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -1330,7 +1330,7 @@ namespace gum_tests {
 
     void testExistsAggregateArray() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type state OK, NOK;" << std::endl;
       input << "interface Foo { " << std::endl
             << "state state;" << std::endl
@@ -1341,7 +1341,7 @@ namespace gum_tests {
             << "boolean isWorking = exists([myFoos.state, myBoos.state], OK);"
             << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -1379,7 +1379,7 @@ namespace gum_tests {
 
     void testMinAggregate() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "int(0,10) state;" << std::endl;
       input << "interface Foo { " << std::endl
             << "state state;" << std::endl
@@ -1388,7 +1388,7 @@ namespace gum_tests {
             << "Foo[] myFoos;" << std::endl
             << "state isWorking = min(myFoos.state);" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -1426,7 +1426,7 @@ namespace gum_tests {
 
     void testMinAggregateArray() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "int(0,10) state;" << std::endl;
       input << "interface Foo { " << std::endl
             << "state state;" << std::endl
@@ -1437,7 +1437,7 @@ namespace gum_tests {
             << "state isWorking = min([myFoos.state, myBoos.state]);"
             << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -1475,7 +1475,7 @@ namespace gum_tests {
 
     void testMaxAggregate() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "int(0,10) state;" << std::endl;
       input << "interface Foo { " << std::endl
             << "state state;" << std::endl
@@ -1484,7 +1484,7 @@ namespace gum_tests {
             << "Foo[] myFoos;" << std::endl
             << "state isWorking = max(myFoos.state);" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -1522,7 +1522,7 @@ namespace gum_tests {
 
     void testMaxAggregateArray() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "int(0,10) state;" << std::endl;
       input << "interface Foo { " << std::endl
             << "state state;" << std::endl
@@ -1533,7 +1533,7 @@ namespace gum_tests {
             << "state isWorking = max([myFoos.state, myBoos.state]);"
             << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -1571,7 +1571,7 @@ namespace gum_tests {
 
     void testMedianAggregate() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "int(0,10) state;" << std::endl;
       input << "interface Foo { " << std::endl
             << "state state;" << std::endl
@@ -1580,7 +1580,7 @@ namespace gum_tests {
             << "Foo[] myFoos;" << std::endl
             << "state isWorking = median(myFoos.state);" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -1618,7 +1618,7 @@ namespace gum_tests {
 
     void testMedianAggregateArray() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "int(0,10) state;" << std::endl;
       input << "interface Foo { " << std::endl
             << "state state;" << std::endl
@@ -1629,7 +1629,7 @@ namespace gum_tests {
             << "state isWorking = median([myFoos.state, myBoos.state]);"
             << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -1667,7 +1667,7 @@ namespace gum_tests {
 
     void testAmplitudeAggregate() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "int(0,10) state;" << std::endl;
       input << "interface Foo { " << std::endl
             << "state state;" << std::endl
@@ -1676,7 +1676,7 @@ namespace gum_tests {
             << "Foo[] myFoos;" << std::endl
             << "state isWorking = amplitude(myFoos.state);" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -1715,7 +1715,7 @@ namespace gum_tests {
 
     void testAmplitudeAggregateArray() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "int(0,10) state;" << std::endl;
       input << "interface Foo { " << std::endl
             << "state state;" << std::endl
@@ -1726,7 +1726,7 @@ namespace gum_tests {
             << "state isWorking = amplitude([myFoos.state, myBoos.state]);"
             << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -1765,7 +1765,7 @@ namespace gum_tests {
 
     void testCountAggregate() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "int(0,10) state;" << std::endl;
       input << "interface Foo { " << std::endl
             << "state state;" << std::endl
@@ -1774,7 +1774,7 @@ namespace gum_tests {
             << "Foo[] myFoos;" << std::endl
             << "state isWorking = count(myFoos.state, 5);" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -1812,7 +1812,7 @@ namespace gum_tests {
 
     void testCountAggregateArray() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "int(0,10) state;" << std::endl;
       input << "interface Foo { " << std::endl
             << "state state;" << std::endl
@@ -1823,7 +1823,7 @@ namespace gum_tests {
             << "state isWorking = count([myFoos.state, myBoos.state], 5);"
             << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -1861,7 +1861,7 @@ namespace gum_tests {
 
     void testOrAggregateWithErrors1() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface Foo { " << std::endl
             << "boolean state;" << std::endl
             << "}" << std::endl;
@@ -1869,7 +1869,7 @@ namespace gum_tests {
             << "Foo[] myFoos;" << std::endl
             << "boolean isWorking = or(myBoos.state);" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -1877,7 +1877,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|6 col 24| Error : Link myBoos in chain myBoos.state "
              "not found";
       TS_ASSERT_EQUALS( line, msg.str() );
@@ -1885,7 +1885,7 @@ namespace gum_tests {
 
     void testOrAggregateWithErrors2() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface Foo { " << std::endl
             << "boolean state;" << std::endl
             << "}" << std::endl;
@@ -1893,7 +1893,7 @@ namespace gum_tests {
             << "Foo[] myFoos;" << std::endl
             << "boolean isWorking = or(myFoos.st);" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -1901,7 +1901,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|6 col 24| Error : Link st in chain myFoos.st not "
              "found";
       TS_ASSERT_EQUALS( line, msg.str() );
@@ -1909,7 +1909,7 @@ namespace gum_tests {
 
     void testOrAggregateWithErrors3() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface Foo { " << std::endl
             << "boolean state;" << std::endl
             << "}" << std::endl;
@@ -1917,7 +1917,7 @@ namespace gum_tests {
             << "Foo[] myFoos;" << std::endl
             << "boolean isWorking = or();" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -1925,14 +1925,14 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|6 col 24| Error : invalid declaration";
       TS_ASSERT_EQUALS( line, msg.str() );
     }
 
     void testOrAggregateWithErrors4() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface Foo { " << std::endl
             << "boolean state;" << std::endl
             << "}" << std::endl;
@@ -1946,7 +1946,7 @@ namespace gum_tests {
             << "boolean isWorking = or([myFoos.state, myBoos.state]);"
             << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -1954,7 +1954,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|11 col 39| Error : Expected type boolean for parent "
              "myBoos.state, found state";
       TS_ASSERT_EQUALS( line, msg.str() );
@@ -1962,7 +1962,7 @@ namespace gum_tests {
 
     void testCountAggregateWithErrors5() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "int(0,10) state;" << std::endl;
       input << "interface Foo { " << std::endl
             << "state state;" << std::endl
@@ -1971,7 +1971,7 @@ namespace gum_tests {
             << "Foo[] myFoos;" << std::endl
             << "state isWorking = count(myFoos.state, foobar);" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -1979,7 +1979,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|7 col 39| Error : Parameter foobar in aggregate "
              "isWorking does not match any expected values";
       TS_ASSERT_EQUALS( line, msg.str() );
@@ -1987,14 +1987,14 @@ namespace gum_tests {
 
     void testInheritance1() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface Foo { " << std::endl
             << "boolean state;" << std::endl
             << "}" << std::endl;
       input << "class Bar implements Foo { " << std::endl
             << "boolean state {[0.2, 0.8]};" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -2018,14 +2018,14 @@ namespace gum_tests {
 
     void testInheritance2() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface Foo { " << std::endl
             << "boolean state;" << std::endl
             << "}" << std::endl;
       input << "class Bar implements Foo { " << std::endl
             << "boolean state {[0.2, 0.8]};" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -2049,7 +2049,7 @@ namespace gum_tests {
 
     void testInheritance3() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface iFoo { " << std::endl
             << "boolean state;" << std::endl
             << "}" << std::endl;
@@ -2062,7 +2062,7 @@ namespace gum_tests {
             << "boolean isWorking dependson state {[0.5, 0.5, 0.5, 0.5]};"
             << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -2088,14 +2088,14 @@ namespace gum_tests {
 
     void testInheritanceError1() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface iFoo { " << std::endl
             << "boolean state;" << std::endl
             << "}" << std::endl;
       input << "class Foo implements Bar { " << std::endl
             << "boolean state {[0.2, 0.8]};" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -2103,21 +2103,21 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|4 col 22| Error : Interface Bar not found";
       TS_ASSERT_EQUALS( line, msg.str() );
     }
 
     void testInheritanceError2() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface iFoo { " << std::endl
             << "boolean state;" << std::endl
             << "}" << std::endl;
       input << "class Foo implements iFoo { " << std::endl
             << "boolean stat {[0.2, 0.8]};" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -2125,7 +2125,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|4 col 7| Error : Class Foo does not implement all of "
              "interface iFoo attributes";
       TS_ASSERT_EQUALS( line, msg.str() );
@@ -2133,7 +2133,7 @@ namespace gum_tests {
 
     void testInheritanceError3() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface iFoo { " << std::endl
             << "boolean state;" << std::endl
             << "}" << std::endl;
@@ -2141,7 +2141,7 @@ namespace gum_tests {
       input << "class Foo implements iFoo { " << std::endl
             << "state state {[0.2, 0.8]};" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -2149,7 +2149,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|6 col 7| Error : Class Foo attribute state does not "
              "respect interface iFoo";
       TS_ASSERT_EQUALS( line, msg.str() );
@@ -2157,14 +2157,14 @@ namespace gum_tests {
 
     void testInheritanceError4() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "class Foo { " << std::endl
             << "boolean state {[0.3, 0.7]};" << std::endl
             << "}" << std::endl;
       input << "class Bar extends oo { " << std::endl
             << "boolean state {[0.2, 0.8]};" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -2172,14 +2172,14 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|4 col 19| Error : Unknown class oo";
       TS_ASSERT_EQUALS( line, msg.str() );
     }
 
     void testInheritanceError5() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "class Foo { " << std::endl
             << "boolean state {[0.3, 0.7]};" << std::endl
             << "}" << std::endl;
@@ -2187,7 +2187,7 @@ namespace gum_tests {
       input << "class Bar extends Foo { " << std::endl
             << "state state {[0.2, 0.8]};" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -2195,7 +2195,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|6 col 7| Error : Illegal overload of element state from "
              "class Foo";
       TS_ASSERT_EQUALS( line, msg.str() );
@@ -2203,7 +2203,7 @@ namespace gum_tests {
 
     void testOrderDoesNotMatter1() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "class Bar extends Foo { " << std::endl
             << "state state {[0.5, 0.5]};" << std::endl
             << "boolean isWorking dependson state {[0.5, 0.5, 0.5, 0.5]};"
@@ -2216,7 +2216,7 @@ namespace gum_tests {
       input << "interface iFoo { " << std::endl
             << "boolean state;" << std::endl
             << "}" << std::endl;
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -2242,7 +2242,7 @@ namespace gum_tests {
 
     void testOrderDoesNotMatter2() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "class Bar extends Foo { " << std::endl
             << "boolean isWorking dependson state {[0.5, 0.5, 0.5, 0.5]};"
             << std::endl
@@ -2255,7 +2255,7 @@ namespace gum_tests {
       input << "interface iFoo { " << std::endl
             << "boolean state;" << std::endl
             << "}" << std::endl;
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -2284,7 +2284,7 @@ namespace gum_tests {
       auto path = GET_RESSOURCES_PATH( "o3prm/printers.o3prm" );
       gum::prm::PRM<double> prm;
       auto input = std::ifstream( path );
-      auto output = std::stringstream();
+      std::stringstream output;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
       TS_GUM_ASSERT_THROWS_NOTHING( factory.parseStream( input, output ) );
@@ -2294,7 +2294,7 @@ namespace gum_tests {
 
     void testClassWithOverloading() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type state extends boolean OK: true, NOK: false;";
       input << std::endl;
       input << "interface Plop { "
@@ -2315,7 +2315,7 @@ namespace gum_tests {
                "state state {[ 0.1, 0.9 ]};"
                "}";
       input << std::endl;
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -2383,7 +2383,7 @@ namespace gum_tests {
 
     void testClassWithOverloadingError1() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type state extends boolean OK: true, NOK: false;";
       input << std::endl;
       input << "interface Plop { "
@@ -2404,7 +2404,7 @@ namespace gum_tests {
                "state state {[ 0.1, 0.9 ]};"
                "}";
       input << std::endl;
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -2412,7 +2412,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|5 col 33| Error : Illegal overload of element plop from class "
              "Bar";
       TS_ASSERT_EQUALS( line, msg.str() );
@@ -2420,7 +2420,7 @@ namespace gum_tests {
 
     void testAggregateWithError() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "int(0,10) state;" << std::endl;
       input << "interface Foo { " << std::endl
             << "state state;" << std::endl
@@ -2431,7 +2431,7 @@ namespace gum_tests {
             << "state isWorking = count([myFoos, myBoos.state], 5);"
             << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -2439,7 +2439,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|8 col 26| Error : Illegal parent myFoos";
       TS_ASSERT_EQUALS( line, msg.str() );
     }
diff --git a/src/testunits/module_PRM/O3InterfaceTestSuite.h b/src/testunits/module_PRM/O3InterfaceTestSuite.h
index c766973..cdaee27 100644
--- src/testunits/module_PRM/O3InterfaceTestSuite.h
+++ src/testunits/module_PRM/O3InterfaceTestSuite.h
@@ -38,9 +38,9 @@ namespace gum_tests {
 
     void testEmptyInterface() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface IBar { }";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -57,9 +57,9 @@ namespace gum_tests {
 
     void testEmptyInterfaceError1() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interfaces IBar { }";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -67,7 +67,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|1 col 1| Error : invalid declaration";
       TS_ASSERT_EQUALS( line, msg.str() );
       TS_ASSERT_EQUALS( prm.interfaces().size(), (gum::Size)0 );
@@ -76,9 +76,9 @@ namespace gum_tests {
 
     void testEmptyInterfaceError2() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface { }";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -86,7 +86,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|1 col 11| Error : label expected";
       TS_ASSERT_EQUALS( line, msg.str() );
       TS_ASSERT_EQUALS( prm.interfaces().size(), (gum::Size)0 );
@@ -95,9 +95,9 @@ namespace gum_tests {
 
     void testEmptyInterfaceError3() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface ++++/ze { }";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -105,7 +105,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|1 col 11| Error : label expected";
       TS_ASSERT_EQUALS( line, msg.str() );
       TS_ASSERT_EQUALS( prm.interfaces().size(), (gum::Size)0 );
@@ -114,11 +114,11 @@ namespace gum_tests {
 
     void testSimpleInterface() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface IBar { " << std::endl
             << "boolean state;" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -135,11 +135,11 @@ namespace gum_tests {
 
     void testSimpleInterfaceError1() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface IBar { " << std::endl
             << "t_state state;" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -147,7 +147,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|2 col 1| Error : Unknown type t_state";
       TS_ASSERT_EQUALS( line, msg.str() );
       TS_ASSERT_EQUALS( prm.interfaces().size(), (gum::Size)1 );
@@ -160,11 +160,11 @@ namespace gum_tests {
 
     void testSimpleInterfaceError2() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface IBar { " << std::endl
             << "=%+ state;" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -172,7 +172,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|2 col 1| Error : \"}\" expected";
       TS_ASSERT_EQUALS( line, msg.str() );
       TS_ASSERT_EQUALS( prm.interfaces().size(), (gum::Size)0 );
@@ -181,9 +181,9 @@ namespace gum_tests {
 
     void testSimpleInterfaceError3() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface IBar { " << std::endl << "state;" << std::endl << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -191,7 +191,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|2 col 6| Error : label expected";
       TS_ASSERT_EQUALS( line, msg.str() );
       TS_ASSERT_EQUALS( prm.interfaces().size(), (gum::Size)0 );
@@ -200,11 +200,11 @@ namespace gum_tests {
 
     void testSimpleInterfaceError4() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface IBar { " << std::endl
             << "boolean state" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -212,7 +212,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|3 col 1| Error : semicolon expected";
       TS_ASSERT_EQUALS( line, msg.str() );
       TS_ASSERT_EQUALS( prm.interfaces().size(), (gum::Size)0 );
@@ -221,11 +221,11 @@ namespace gum_tests {
 
     void testSimpleInterfaceError5() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface IBar { " << std::endl
             << "boolean +/+/;" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -233,7 +233,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|2 col 9| Error : label expected";
       TS_ASSERT_EQUALS( line, msg.str() );
       TS_ASSERT_EQUALS( prm.interfaces().size(), (gum::Size)0 );
@@ -242,11 +242,11 @@ namespace gum_tests {
 
     void testWeAreOKWithSemicolons() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface IBar { " << std::endl
             << "boolean state;" << std::endl
             << "};";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -263,12 +263,12 @@ namespace gum_tests {
 
     void testSimpleInterfaceError6() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface IBar { " << std::endl
             << "boolean state;" << std::endl
             << "boolean state;" << std::endl
             << "};";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -276,7 +276,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|3 col 1| Error : Element state already exists";
       TS_ASSERT_EQUALS( line, msg.str() );
       TS_ASSERT_EQUALS( prm.interfaces().size(), (gum::Size)1 );
@@ -289,7 +289,7 @@ namespace gum_tests {
 
     void testInterfaceWithReference() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface IFoo { " << std::endl
             << "boolean state;" << std::endl
             << "}";
@@ -297,7 +297,7 @@ namespace gum_tests {
             << "IFoo myFoo;" << std::endl
             << "boolean state;" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -319,14 +319,14 @@ namespace gum_tests {
 
     void testSuperInterface() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface IFoo { " << std::endl
             << "boolean state;" << std::endl
             << "}";
       input << "interface IBar extends IFoo { " << std::endl
             << "boolean unstate;" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -347,14 +347,14 @@ namespace gum_tests {
 
     void testSuperInterfaceError1() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface IFoo { " << std::endl
             << "boolean state;" << std::endl
             << "}" << std::endl;
       input << "interface IBar extends IFooBar { " << std::endl
             << "boolean unstate;" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -362,7 +362,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|4 col 24| Error : Interface IFooBar not found";
       TS_ASSERT_EQUALS( line, msg.str() );
       TS_ASSERT_EQUALS( prm.interfaces().size(), (gum::Size)0 );
@@ -372,7 +372,7 @@ namespace gum_tests {
 
     void testSuperInterfaceError2() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type t_state OK, NOK;" << std::endl;
       input << "interface IFoo { " << std::endl
             << "boolean state;" << std::endl
@@ -380,7 +380,7 @@ namespace gum_tests {
       input << "interface IBar extends t_state { " << std::endl
             << "boolean unstate;" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -388,7 +388,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|5 col 24| Error : Interface t_state not found";
       TS_ASSERT_EQUALS( line, msg.str() );
       TS_ASSERT_EQUALS( prm.interfaces().size(), (gum::Size)0 );
@@ -398,14 +398,14 @@ namespace gum_tests {
 
     void testSuperInterfaceError3() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface IFoo { " << std::endl
             << "boolean state;" << std::endl
             << "}" << std::endl;
       input << "interface IBar extend IFoo { " << std::endl
             << "boolean unstate;" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -413,7 +413,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|4 col 16| Error : \"{\" expected";
       TS_ASSERT_EQUALS( line, msg.str() );
       TS_ASSERT_EQUALS( prm.interfaces().size(), (gum::Size)0 );
@@ -421,7 +421,7 @@ namespace gum_tests {
 
     void testSuperInterfaceWithAttributeOverload() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type t_state extends boolean" << std::endl;
       input << "OK:true, NOK:false;" << std::endl;
       input << "interface IFoo { " << std::endl
@@ -430,7 +430,7 @@ namespace gum_tests {
       input << "interface IBar extends IFoo { " << std::endl
             << "t_state state;" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -451,7 +451,7 @@ namespace gum_tests {
 
     void testSuperInterfaceWithReferenceOverload() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface IFoo { " << std::endl
             << "boolean state;" << std::endl
             << "}" << std::endl;
@@ -462,7 +462,7 @@ namespace gum_tests {
       input << "interface IPloc extends IPlop { " << std::endl
             << "IBar myFoo; " << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -484,12 +484,12 @@ namespace gum_tests {
 
     void testOrderDoesNotMatter1() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface IBar { " << std::endl
             << "t_state state;" << std::endl
             << "}" << std::endl
             << "type t_state OK, NOK;";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -507,7 +507,7 @@ namespace gum_tests {
 
     void testOrderDoesNotMatter2() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface IBar extends IFoo { " << std::endl
             << "t_state state;" << std::endl
             << "}";
@@ -516,7 +516,7 @@ namespace gum_tests {
             << "}" << std::endl;
       input << "type t_state extends boolean" << std::endl
             << "OK:true, NOK:false;" << std::endl;
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -537,7 +537,7 @@ namespace gum_tests {
 
     void testOrderDoesNotMatter3() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface IBar { " << std::endl
             << "IFoo foo;" << std::endl
             << "boolean state;" << std::endl
@@ -545,7 +545,7 @@ namespace gum_tests {
       input << "interface IFoo { " << std::endl
             << "boolean state;" << std::endl
             << "}" << std::endl;
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -566,7 +566,7 @@ namespace gum_tests {
 
     void testOrderDoesNotMatter4() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface IBar { " << std::endl
             << "IFoo foo;" << std::endl
             << "boolean state;" << std::endl
@@ -575,7 +575,7 @@ namespace gum_tests {
             << "IBar bar; " << std::endl
             << "boolean state;" << std::endl
             << "}" << std::endl;
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -597,12 +597,12 @@ namespace gum_tests {
 
     void testInterfaceWithReferenceError() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "interface IFoo { " << std::endl
             << "IFoo foo;" << std::endl
             << "boolean state;" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -610,7 +610,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|2 col 1| Error : Interface IFoo cannot reference "
              "itself";
       TS_ASSERT_EQUALS( line, msg.str() );
@@ -619,7 +619,7 @@ namespace gum_tests {
 
     void testInterfaceWithOverloading() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type state extends boolean OK: true, NOK: false;";
       input << std::endl;
       input << "interface Plop { "
@@ -638,7 +638,7 @@ namespace gum_tests {
                "SubPlop plop;"
                "}";
       input << std::endl;
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -684,7 +684,7 @@ namespace gum_tests {
 
     void testInterfaceWithOverloadingError1() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type state extends boolean OK: true, NOK: false;";
       input << std::endl;
       input << "interface Plop { "
@@ -703,7 +703,7 @@ namespace gum_tests {
                "SubPlop plop;"
                "}";
       input << std::endl;
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -711,14 +711,14 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|5 col 29| Error : Illegal overload of element plop";
       TS_ASSERT_EQUALS( line, msg.str() );
     }
 
     void testInterfaceWithOverloadingError2() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type state OK, NOK;";
       input << std::endl;
       input << "interface Plop { "
@@ -729,7 +729,7 @@ namespace gum_tests {
                "state state;"
                "}";
       input << std::endl;
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -737,7 +737,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|3 col 34| Error : Illegal overload of element state";
       TS_ASSERT_EQUALS( line, msg.str() );
     }
diff --git a/src/testunits/module_PRM/O3SystemTestSuite.h b/src/testunits/module_PRM/O3SystemTestSuite.h
index e76d785..fe510d9 100644
--- src/testunits/module_PRM/O3SystemTestSuite.h
+++ src/testunits/module_PRM/O3SystemTestSuite.h
@@ -77,9 +77,9 @@ namespace gum_tests {
 
     void testSimpleSystem() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "system Foo { }";
-      auto output = std::stringstream();
+      std::stringstream output;
       auto factory = gum::prm::o3prm::O3prmReader<double>( *simple_printers );
       // Act
       TS_GUM_ASSERT_THROWS_NOTHING( factory.parseStream( input, output ) );
@@ -93,7 +93,7 @@ namespace gum_tests {
 
     void testMicroSystem() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "system microSys {" << std::endl
             << "PowerSupply pow;" << std::endl
             << "Room r;" << std::endl
@@ -106,7 +106,7 @@ namespace gum_tests {
             << "Equipment e;" << std::endl
             << "e.room = r;" << std::endl
             << "}" << std::endl;
-      auto output = std::stringstream();
+      std::stringstream output;
       auto factory = gum::prm::o3prm::O3prmReader<double>( *simple_printers );
       // Act
       TS_GUM_ASSERT_THROWS_NOTHING( factory.parseStream( input, output ) );
@@ -120,18 +120,18 @@ namespace gum_tests {
 
     void testMicroSystemWithError1() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "system microSys {" << std::endl
             << "PowerSupply;" << std::endl
             << "}" << std::endl;
-      auto output = std::stringstream();
+      std::stringstream output;
       auto factory = gum::prm::o3prm::O3prmReader<double>( *simple_printers );
       // Act
       TS_GUM_ASSERT_THROWS_NOTHING( factory.parseStream( input, output ) );
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|2 col 12| Error : invalid declaration";
       TS_ASSERT_EQUALS( line, msg.str() );
       TS_ASSERT_EQUALS( simple_printers->systems().size(), (gum::Size)0 );
@@ -139,18 +139,18 @@ namespace gum_tests {
 
     void testMicroSystemWithError2() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "system microSys {" << std::endl
             << "FOO bar;" << std::endl
             << "}" << std::endl;
-      auto output = std::stringstream();
+      std::stringstream output;
       auto factory = gum::prm::o3prm::O3prmReader<double>( *simple_printers );
       // Act
       TS_GUM_ASSERT_THROWS_NOTHING( factory.parseStream( input, output ) );
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|2 col 1| Error : Unknown class FOO";
       TS_ASSERT_EQUALS( line, msg.str() );
       TS_ASSERT_EQUALS( simple_printers->systems().size(), (gum::Size)0 );
@@ -158,18 +158,18 @@ namespace gum_tests {
 
     void testMicroSystemWithError3() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "system {" << std::endl
             << "PowerSupply pow;" << std::endl
             << "}" << std::endl;
-      auto output = std::stringstream();
+      std::stringstream output;
       auto factory = gum::prm::o3prm::O3prmReader<double>( *simple_printers );
       // Act
       TS_GUM_ASSERT_THROWS_NOTHING( factory.parseStream( input, output ) );
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|1 col 8| Error : label expected";
       TS_ASSERT_EQUALS( line, msg.str() );
       TS_ASSERT_EQUALS( simple_printers->systems().size(), (gum::Size)0 );
@@ -177,19 +177,19 @@ namespace gum_tests {
 
     void testMicroSystemWithError4() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "system microSys {" << std::endl
             << "PowerSupply pow" << std::endl
             << "Room r;" << std::endl
             << "}" << std::endl;
-      auto output = std::stringstream();
+      std::stringstream output;
       auto factory = gum::prm::o3prm::O3prmReader<double>( *simple_printers );
       // Act
       TS_GUM_ASSERT_THROWS_NOTHING( factory.parseStream( input, output ) );
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|3 col 1| Error : semicolon expected";
       TS_ASSERT_EQUALS( line, msg.str() );
       TS_ASSERT_EQUALS( simple_printers->systems().size(), (gum::Size)0 );
@@ -197,7 +197,7 @@ namespace gum_tests {
 
     void testMicroSystemWithError5() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "system microSys {" << std::endl
             << "PowerSupply pow;" << std::endl
             << "Room r;" << std::endl
@@ -205,14 +205,14 @@ namespace gum_tests {
             << "Computer c;" << std::endl
             << "r.power   pow;" << std::endl
             << "}" << std::endl;
-      auto output = std::stringstream();
+      std::stringstream output;
       auto factory = gum::prm::o3prm::O3prmReader<double>( *simple_printers );
       // Act
       TS_GUM_ASSERT_THROWS_NOTHING( factory.parseStream( input, output ) );
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|6 col 1| Error : Unknown class r.power";
       TS_ASSERT_EQUALS( line, msg.str() );
       TS_ASSERT_EQUALS( simple_printers->systems().size(), (gum::Size)0 );
@@ -220,7 +220,7 @@ namespace gum_tests {
 
     void testMicroSystemWithError6() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "system microSys {" << std::endl
             << "PowerSupply pow;" << std::endl
             << "Room r;" << std::endl
@@ -231,14 +231,14 @@ namespace gum_tests {
             << "//c.room = r;" << std::endl
             << "c.printers += p;" << std::endl
             << "}" << std::endl;
-      auto output = std::stringstream();
+      std::stringstream output;
       auto factory = gum::prm::o3prm::O3prmReader<double>( *simple_printers );
       // Act
       TS_GUM_ASSERT_THROWS_NOTHING( factory.parseStream( input, output ) );
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|1 col 8| Error : Could not instantiate the system, some "
              "reference slots must be unassigned";
       TS_ASSERT_EQUALS( line, msg.str() );
@@ -247,7 +247,7 @@ namespace gum_tests {
 
     void testMicroSystemWithError7() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "system microSys {" << std::endl
             << "PowerSupply pow;" << std::endl
             << "Room r;" << std::endl
@@ -259,14 +259,14 @@ namespace gum_tests {
             << "//c.room = r;" << std::endl
             << "c.printers = p;" << std::endl
             << "}" << std::endl;
-      auto output = std::stringstream();
+      std::stringstream output;
       auto factory = gum::prm::o3prm::O3prmReader<double>( *simple_printers );
       // Act
       TS_GUM_ASSERT_THROWS_NOTHING( factory.parseStream( input, output ) );
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|5 col 1| Error : Instance p already exists";
       TS_ASSERT_EQUALS( line, msg.str() );
       TS_ASSERT_EQUALS( simple_printers->systems().size(), (gum::Size)0 );
@@ -274,7 +274,7 @@ namespace gum_tests {
 
     void testSmallSystem() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "system smallSys {" << std::endl
             << "  PowerSupply pow;" << std::endl
             << "  Room r;" << std::endl
@@ -302,7 +302,7 @@ namespace gum_tests {
             << "  another_computer.printers = printers;" << std::endl
             << "  another_computer.printers += another_printer;" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       auto factory = gum::prm::o3prm::O3prmReader<double>( *simple_printers );
       // Act
       TS_GUM_ASSERT_THROWS_NOTHING( factory.parseStream( input, output ) );
@@ -316,7 +316,7 @@ namespace gum_tests {
 
     void testComplexSystem() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "system aSys {" << std::endl
             << "  PowerSupply pow;" << std::endl
             << "  Room r;" << std::endl
@@ -338,7 +338,7 @@ namespace gum_tests {
             << "  ParamClass paramBis(lambda=0.001);" << std::endl
             << "  paramBis.room = r;" << std::endl
             << "}";
-      auto output = std::stringstream();
+      std::stringstream output;
       auto factory = gum::prm::o3prm::O3prmReader<double>( *complex_printers );
       // Act
       TS_GUM_ASSERT_THROWS_NOTHING( factory.parseStream( input, output ) );
diff --git a/src/testunits/module_PRM/O3TypeTestSuite.h b/src/testunits/module_PRM/O3TypeTestSuite.h
index 8f61fb4..c412292 100644
--- src/testunits/module_PRM/O3TypeTestSuite.h
+++ src/testunits/module_PRM/O3TypeTestSuite.h
@@ -38,9 +38,9 @@ namespace gum_tests {
 
     void testSimpleType() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type t_state OK, NOK;";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -57,9 +57,9 @@ namespace gum_tests {
 
     void testSimpleTypeError1() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "types t_state OK, NOK;";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -67,7 +67,7 @@ namespace gum_tests {
       // Assert
       std::string line;
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|1 col 1| Error : invalid declaration";
       TS_ASSERT_EQUALS( line, msg.str() );
       TS_ASSERT_EQUALS( prm.types().size(), (gum::Size)1 );
@@ -76,15 +76,15 @@ namespace gum_tests {
 
     void testSimpleTypeError2() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type t_state OK, NOK";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
       TS_GUM_ASSERT_THROWS_NOTHING( factory.parseStream( input, output ) );
       // Assert
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|1 col 21| Error : semicolon expected" << std::endl;
       TS_ASSERT_EQUALS( output.str(), msg.str() );
       TS_ASSERT_EQUALS( prm.types().size(), (gum::Size)1 );
@@ -93,15 +93,15 @@ namespace gum_tests {
 
     void testSimpleTypeError3() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type t_state OK, NOK" << std::endl << "type t_ink empty, full;";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
       TS_GUM_ASSERT_THROWS_NOTHING( factory.parseStream( input, output ) );
       // Assert
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|2 col 1| Error : semicolon expected" << std::endl;
       TS_ASSERT_EQUALS( output.str(), msg.str() );
       TS_ASSERT_EQUALS( prm.types().size(), (gum::Size)1 );
@@ -111,15 +111,15 @@ namespace gum_tests {
 
     void testSimpleTypeError4() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type t_state OK;";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
       TS_GUM_ASSERT_THROWS_NOTHING( factory.parseStream( input, output ) );
       // Assert
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|1 col 16| Error : comma expected" << std::endl;
       TS_ASSERT_EQUALS( output.str(), msg.str() );
       TS_ASSERT_EQUALS( prm.types().size(), (gum::Size)1 );
@@ -128,15 +128,15 @@ namespace gum_tests {
 
     void testSimpleTypeError5() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type t_state OK,;";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
       TS_GUM_ASSERT_THROWS_NOTHING( factory.parseStream( input, output ) );
       // Assert
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|1 col 17| Error : invalid declaration" << std::endl;
       TS_ASSERT_EQUALS( output.str(), msg.str() );
       TS_ASSERT_EQUALS( prm.types().size(), (gum::Size)1 );
@@ -145,15 +145,15 @@ namespace gum_tests {
 
     void testSimpleTypeError6() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type +==+ OK, NOK;";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
       TS_GUM_ASSERT_THROWS_NOTHING( factory.parseStream( input, output ) );
       // Assert
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|1 col 6| Error : label expected" << std::endl;
       TS_ASSERT_EQUALS( output.str(), msg.str() );
       TS_ASSERT_EQUALS( prm.types().size(), (gum::Size)1 );
@@ -162,15 +162,15 @@ namespace gum_tests {
 
     void testSimpleTypeError7() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type t_state +=%./, NOK;";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
       TS_GUM_ASSERT_THROWS_NOTHING( factory.parseStream( input, output ) );
       // Assert
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|1 col 14| Error : invalid declaration" << std::endl;
       TS_ASSERT_EQUALS( output.str(), msg.str() );
       TS_ASSERT_EQUALS( prm.types().size(), (gum::Size)1 );
@@ -179,15 +179,15 @@ namespace gum_tests {
 
     void testSimpleTypeError8() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type t_state OK, +NOK;";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
       TS_GUM_ASSERT_THROWS_NOTHING( factory.parseStream( input, output ) );
       // Assert
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|1 col 18| Error : invalid declaration" << std::endl;
       TS_ASSERT_EQUALS( output.str(), msg.str() );
       TS_ASSERT_EQUALS( prm.types().size(), (gum::Size)1 );
@@ -196,16 +196,16 @@ namespace gum_tests {
 
     void testSimpleTypeError9() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type t_state OK, NOK;" << std::endl
             << "type t_state OK, YEA, GOO;";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
       TS_GUM_ASSERT_THROWS_NOTHING( factory.parseStream( input, output ) );
       // Assert
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|2 col 6| Error : Type t_state exists already" << std::endl;
       TS_ASSERT_EQUALS( output.str(), msg.str() );
       TS_ASSERT_EQUALS( prm.types().size(), (gum::Size)1 );
@@ -214,11 +214,11 @@ namespace gum_tests {
 
     void testExtendedType() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type t_state extends boolean "
             << "OK: true,"
             << "NOK: false;";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -238,11 +238,11 @@ namespace gum_tests {
 
     void testExtendedTypeError1() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type t_state extend boolean "
             << "OK: true,"
             << "NOK: false;";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -252,18 +252,18 @@ namespace gum_tests {
       TS_ASSERT( !prm.isType( "t_state" ) );
       auto line = std::string();
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|1 col 21| Error : comma expected";
       TS_ASSERT_EQUALS( line, msg.str() );
     }
 
     void testExtendedTypeError2() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type t_state extends foobar "
             << "OK: true,"
             << "NOK: false;";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -273,18 +273,18 @@ namespace gum_tests {
       TS_ASSERT( !prm.isType( "t_state" ) );
       auto line = std::string();
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|1 col 22| Error : Unknown type foobar";
       TS_ASSERT_EQUALS( line, msg.str() );
     }
 
     void testExtendedTypeError3() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type t_state extends boolean " << std::endl
             << "OK: vrue," << std::endl
             << "NOK: false;" << std::endl;
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -294,14 +294,14 @@ namespace gum_tests {
       TS_ASSERT( !prm.isType( "t_state" ) );
       auto line = std::string();
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|2 col 5| Error : Unknown label vrue in boolean";
       TS_ASSERT_EQUALS( line, msg.str() );
     }
 
     void testOrderDoesNotMatter() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type t_degraded extends t_state " << std::endl
             << "OK: OK," << std::endl
             << "Dysfunctional: NOK," << std::endl
@@ -309,7 +309,7 @@ namespace gum_tests {
       input << "type t_state extends boolean" << std::endl
             << "OK: true," << std::endl
             << "NOK: false;";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -323,9 +323,9 @@ namespace gum_tests {
 
     void testIntType() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "int (0,9) t_power;";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -351,9 +351,9 @@ namespace gum_tests {
     void testIntTypeWithNegatives() {
       try {
         // Arrange
-        auto input = std::stringstream();
+        std::stringstream input;
         input << "int (-9,9) t_power;";
-        auto output = std::stringstream();
+        std::stringstream output;
         gum::prm::PRM<double> prm;
         auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
         // Act
@@ -389,9 +389,9 @@ namespace gum_tests {
 
     void testIntTypeError1() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "ints (0,9) t_power;";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -401,16 +401,16 @@ namespace gum_tests {
       TS_ASSERT( !prm.isType( "t_power" ) );
       auto line = std::string();
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|1 col 1| Error : invalid declaration";
       TS_ASSERT_EQUALS( line, msg.str() );
     }
 
     void testIntTypeError2() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "int 0,9 t_power;";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -420,16 +420,16 @@ namespace gum_tests {
       TS_ASSERT( !prm.isType( "t_power" ) );
       auto line = std::string();
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|1 col 5| Error : \"(\" expected";
       TS_ASSERT_EQUALS( line, msg.str() );
     }
 
     void testIntTypeError3() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "int (0 9) t_power;";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -439,16 +439,16 @@ namespace gum_tests {
       TS_ASSERT( !prm.isType( "t_power" ) );
       auto line = std::string();
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|1 col 8| Error : comma expected";
       TS_ASSERT_EQUALS( line, msg.str() );
     }
 
     void testIntTypeError4() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "int (0, 9) +==++;";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -458,16 +458,16 @@ namespace gum_tests {
       TS_ASSERT( !prm.isType( "t_power" ) );
       auto line = std::string();
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|1 col 12| Error : label expected";
       TS_ASSERT_EQUALS( line, msg.str() );
     }
 
     void testIntTypeError5() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "int (plop, 9) t_power";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -477,16 +477,16 @@ namespace gum_tests {
       TS_ASSERT( !prm.isType( "t_power" ) );
       auto line = std::string();
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|1 col 6| Error : integer expected";
       TS_ASSERT_EQUALS( line, msg.str() );
     }
 
     void testIntTypeError6() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "int (0, 9, 15) t_power";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -496,16 +496,16 @@ namespace gum_tests {
       TS_ASSERT( !prm.isType( "t_power" ) );
       auto line = std::string();
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|1 col 10| Error : \")\" expected";
       TS_ASSERT_EQUALS( line, msg.str() );
     }
 
     void testIntTypeError7() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "int (0.0, 9) t_power";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -515,16 +515,16 @@ namespace gum_tests {
       TS_ASSERT( !prm.isType( "t_power" ) );
       auto line = std::string();
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|1 col 6| Error : integer expected";
       TS_ASSERT_EQUALS( line, msg.str() );
     }
 
     void testIntTypeError8() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "int (9, 9) t_power";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -534,16 +534,16 @@ namespace gum_tests {
       TS_ASSERT( !prm.isType( "t_power" ) );
       auto line = std::string();
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|1 col 19| Error : semicolon expected";
       TS_ASSERT_EQUALS( line, msg.str() );
     }
 
     void testIntTypeError9() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "int (10, 9) t_power";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -553,16 +553,16 @@ namespace gum_tests {
       TS_ASSERT( !prm.isType( "t_power" ) );
       auto line = std::string();
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|1 col 20| Error : semicolon expected";
       TS_ASSERT_EQUALS( line, msg.str() );
     }
 
     void testIntTypeError10() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "int (9, 0) t_power";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -572,16 +572,16 @@ namespace gum_tests {
       TS_ASSERT( !prm.isType( "t_power" ) );
       auto line = std::string();
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|1 col 19| Error : semicolon expected";
       TS_ASSERT_EQUALS( line, msg.str() );
     }
 
     void testTypeInModule1() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type t_state OK, NOK;";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -596,7 +596,7 @@ namespace gum_tests {
 
     void testTypeInModule2() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "type t_degraded extends t_state " << std::endl
             << "OK: OK," << std::endl
             << "Dysfunctional: NOK," << std::endl
@@ -604,7 +604,7 @@ namespace gum_tests {
       input << "type t_state extends boolean" << std::endl
             << "OK: true," << std::endl
             << "NOK: false;";
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -621,9 +621,9 @@ namespace gum_tests {
 
     void testRealType1() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "real(0, 90, 180) angle;" << std::endl;
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -640,9 +640,9 @@ namespace gum_tests {
 
     void testRealType2() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "real(0, 90, 180, 360) angle;" << std::endl;
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -660,9 +660,9 @@ namespace gum_tests {
 
     void testRealTypeError1() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "real(0, 90) angle;" << std::endl;
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -670,16 +670,16 @@ namespace gum_tests {
       // Assert
       auto line = std::string();
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|1 col 1| Error : Found 2 values in range expected at least 3";
       TS_ASSERT_EQUALS( line, msg.str() );
     }
 
     void testRealTypeError2() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "real(0) angle;" << std::endl;
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -687,16 +687,16 @@ namespace gum_tests {
       // Assert
       auto line = std::string();
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|1 col 1| Error : Found 1 values in range expected at least 3";
       TS_ASSERT_EQUALS( line, msg.str() );
     }
 
     void testRealTypeError3() {
       // Arrange
-      auto input = std::stringstream();
+      std::stringstream input;
       input << "real(0, plop) angle;" << std::endl;
-      auto output = std::stringstream();
+      std::stringstream output;
       gum::prm::PRM<double> prm;
       auto factory = gum::prm::o3prm::O3prmReader<double>( prm );
       // Act
@@ -704,7 +704,7 @@ namespace gum_tests {
       // Assert
       auto line = std::string();
       std::getline( output, line );
-      auto msg = std::stringstream();
+      std::stringstream msg;
       msg << "|1 col 9| Error : invalid declaration";
       TS_ASSERT_EQUALS( line, msg.str() );
     }
